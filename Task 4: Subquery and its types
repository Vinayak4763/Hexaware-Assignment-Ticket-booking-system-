1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery

SELECT venue_id, 
       (SELECT AVG(ticket_price) FROM Event e WHERE e.venue_id = v.venue_id) AS avg_ticket_price
FROM Venue v;

2. Find Events with More Than 50% of Tickets Sold Using Subquery

SELECT event_name, total_seats, available_seats
FROM Event
WHERE available_seats < (total_seats / 2);

3. Calculate the Total Number of Tickets Sold for Each Event

SELECT event_name, total_seats - available_seats AS tickets_sold
FROM Event;

4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery

SELECT customer_name
FROM Customer c
WHERE NOT EXISTS (SELECT 1 FROM Booking b WHERE b.customer_id = c.customer_id);

5. List Events with No Ticket Sales Using a NOT IN Subquery

SELECT event_name
FROM Event
WHERE event_id NOT IN (SELECT event_id FROM Booking);

6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause

SELECT event_type, SUM(tickets_sold) AS total_tickets_sold
FROM (SELECT event_type, total_seats - available_seats AS tickets_sold FROM Event) AS EventSummary
GROUP BY event_type;

7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause

SELECT event_name, ticket_price
FROM Event
WHERE ticket_price > (SELECT AVG(ticket_price) FROM Event);

8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery

SELECT customer_name, 
       (SELECT SUM(total_cost) 
        FROM Booking b 
        WHERE b.customer_id = c.customer_id) AS total_revenue
FROM Customer c;

9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause

SELECT customer_name
FROM Customer c
WHERE EXISTS (SELECT 1 
              FROM Booking b 
              JOIN Event e ON b.event_id = e.event_id 
              WHERE e.venue_id = 1 AND b.customer_id = c.customer_id);

10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY

SELECT event_type, SUM(tickets_sold) AS total_tickets_sold
FROM (SELECT event_type, total_seats - available_seats AS tickets_sold FROM Event) AS EventSummary
GROUP BY event_type;
