1. Write a SQL query to List Events and Their Average Ticket Prices

SELECT event_name, AVG(ticket_price) AS average_ticket_price
FROM Event
GROUP BY event_name;

Output:
| event_name      | average_ticket_price |
|-----------------|----------------------|
| Movie Night     | 500.00               |
| Cricket Match   | 1500.00              |
| Music Evening   | 300.00               |
| Bhopal Carnival | 700.00               |

2. Write a SQL query to Calculate the Total Revenue Generated by Events

SELECT SUM(total_cost) AS total_revenue
FROM Booking;

Output:
| total_revenue |
|---------------|
| 10900.00      |

3. Write a SQL query to find the event with the highest ticket sales

SELECT event_name, SUM(num_tickets) AS total_tickets_sold
FROM Booking
JOIN Event ON Booking.event_id = Event.event_id
GROUP BY event_name
ORDER BY total_tickets_sold DESC
LIMIT 1;

Output:
| event_name      | total_tickets_sold |
|-----------------|--------------------|
| Cricket Match   | 5                  |

4. Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event

SELECT event_name, SUM(num_tickets) AS total_tickets_sold
FROM Booking
JOIN Event ON Booking.event_id = Event.event_id
GROUP BY event_name;

Output:
| event_name      | total_tickets_sold |
|-----------------|--------------------|
| Movie Night     | 2                  |
| Cricket Match   | 5                  |
| Music Evening   | 1                  |
| Bhopal Carnival | 3                  |

5. Write a SQL query to Find Events with No Ticket Sales

SELECT event_name
FROM Event
WHERE event_id NOT IN (SELECT event_id FROM Booking);

Output:
| event_name |
|------------|
| *No matching records* |

6. Write a SQL query to Find the User Who Has Booked the Most Tickets

SELECT customer_name, SUM(num_tickets) AS total_tickets_booked
FROM Customer
JOIN Booking ON Customer.customer_id = Booking.customer_id
GROUP BY customer_name
ORDER BY total_tickets_booked DESC
LIMIT 1;

Output:
| customer_name  | total_tickets_booked |
|----------------|----------------------|
| Rohan Verma    | 5                    |

7. Write a SQL query to List Events and the total number of tickets sold for each month

SELECT DATE_FORMAT(booking_date, '%Y-%m') AS month, event_name, SUM(num_tickets) AS total_tickets_sold
FROM Booking
JOIN Event ON Booking.event_id = Event.event_id
GROUP BY month, event_name
ORDER BY month;

Output:
| month     | event_name      | total_tickets_sold |
|-----------|-----------------|--------------------|
| 2024-10   | Movie Night     | 2                  |
| 2024-10   | Cricket Match   | 5                  |
| 2024-10   | Music Evening   | 1                  |
| 2024-10   | Bhopal Carnival | 3                  |

8. Write a SQL query to calculate the average Ticket Price for Events in Each Venue

SELECT venue_name, AVG(ticket_price) AS average_ticket_price
FROM Event
JOIN Venue ON Event.venue_id = Venue.venue_id
GROUP BY venue_name;

Output:
| venue_name         | average_ticket_price |
|--------------------|----------------------|
| Shree Ram Theatre  | 500.00               |
| Bhopal Haat        | 1500.00              |
| Vidisha Heritage   | 300.00               |
| Kamal Palace       | 700.00               |

9. Write a SQL query to calculate the total Number of Tickets Sold for Each Event Type

SELECT event_type, SUM(num_tickets) AS total_tickets_sold
FROM Booking
JOIN Event ON Booking.event_id = Event.event_id
GROUP BY event_type;

Output:
| event_type | total_tickets_sold |
|------------|--------------------|
| Movie      | 2                  |
| Sports     | 5                  |
| Concert    | 4                  |

10. Write a SQL query to calculate the total Revenue Generated by Events in Each Year

SELECT YEAR(booking_date) AS year, SUM(total_cost) AS total_revenue
FROM Booking
GROUP BY year;

Output:
| year | total_revenue |
|------|---------------|
| 2024 | 10900.00      |

11. Write a SQL query to list users who have booked tickets for multiple events

SELECT customer_name, COUNT(DISTINCT event_id) AS events_booked
FROM Customer
JOIN Booking ON Customer.customer_id = Booking.customer_id
GROUP BY customer_name
HAVING events_booked > 1;

Output:
| customer_name | events_booked |
|---------------|---------------|
| *No matching records* |

12. Write a SQL query to calculate the Total Revenue Generated by Events for Each User

SELECT customer_name, SUM(total_cost) AS total_revenue
FROM Customer
JOIN Booking ON Customer.customer_id = Booking.customer_id
GROUP BY customer_name;

Output:
| customer_name  | total_revenue |
|----------------|---------------|
| Aditi Mishra   | 1000.00       |
| Rohan Verma    | 7500.00       |
| Neha Pandey    | 300.00        |
| Vikrant Shukla | 2100.00       |

13. Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue

SELECT event_type, venue_name, AVG(ticket_price) AS average_ticket_price
FROM Event
JOIN Venue ON Event.venue_id = Venue.venue_id
GROUP BY event_type, venue_name;

Output:
| event_type | venue_name         | average_ticket_price |
|------------|--------------------|----------------------|
| Movie      | Shree Ram Theatre  | 500.00               |
| Sports     | Bhopal Haat        | 1500.00              |
| Concert    | Vidisha Heritage   | 300.00               |
| Concert    | Kamal Palace       | 700.00               |

14. Write a SQL query to List Users and the Total Number of Tickets They've Purchased in the Last 30 Days

SELECT customer_name, SUM(num_tickets) AS total_tickets_purchased
FROM Customer
JOIN Booking ON Customer.customer_id = Booking.customer_id
WHERE booking_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY customer_name;

Output:
| customer_name  | total_tickets_purchased |
|----------------|-------------------------|
| *No matching records* |
